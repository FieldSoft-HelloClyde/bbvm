package parser

import "github.com/wenerme/bbvm/libbbvm/asm"

# TODO Negative integer
# TODO Pseudo data instruction
type BBAsm Peg {
	parser
}

#-------------------------------------------------------------------------
# Instructions
#-------------------------------------------------------------------------
Start <- ( Spacing Line? NL{p.line++} )* EOT
	Literal? # Unused

Line <- ( Comment
        / Label
        / Inst
        / Pseudo ){p.AddAssembly()} (Comment {p.AddAssembly();p.AddComment()})?

Comment <- SEMICOLON <(!NL .)*> {p.Push(&asm.Comment{});p.Push(text)}
Label <- {p.Push(&asm.Label{})} Identifier Spacing COLON

Inst <-  EXIT
		/ RET
		/ NOP
        / ( CALL / PUSH / POP / JMP ) Operand
        / ( IN / OUT ) Operand COMMA Operand
        / CAL	<DATA_TYPE>{p.Push(lookup(asm.T_INT,text))} <CAL_OP>{p.Push(lookup(asm.CAL_ADD,text))} Operand COMMA Operand
        / LD	<DATA_TYPE>{p.Push(lookup(asm.T_INT,text))} Operand COMMA Operand
        / CMP	<DATA_TYPE>{p.Push(lookup(asm.T_INT,text))} Operand COMMA Operand
        / JPC	<CMP_OP>{p.Push(lookup(asm.CMP_A,text))}  Operand

Pseudo <- BLOCK IntegerLiteral IntegerLiteral
		/ DATA Identifier PSEUDO_DATA_TYPE? PseudoDataValue ( COMMA PseudoDataValue )*

PseudoDataValue
	<-	IntegerLiteral	{p.AddPseudoDataValue()}
	/	Identifier		{p.AddPseudoDataValue()}
	/	StringLiteral	{p.AddPseudoDataValue()}
	/	<'%' HexDigits '%'> Spacing {p.Push(text);p.AddPseudoDataValue()}

PSEUDO_DATA_TYPE
	<-	DATA_TYPE
		/ ( "CHAR" / "BIN" ) Space

Operand <- (Identifier 					{p.AddOperand(true)}
        / LBRK Identifier RBRK 			{p.AddOperand(false)}
        / IntegerLiteral 				{p.AddOperand(true)}
        / LBRK IntegerLiteral RBRK		{p.AddOperand(false)}
        #/ FloatLiteral
        ) Spacing

#=========================================================================
#  Lexical Structure
#=========================================================================
#-------------------------------------------------------------------------
#  Spacing
#-------------------------------------------------------------------------
Spacing           <-  [ \t\r\f]*
Space           <-  [ \t\r\f]+

#-------------------------------------------------------------------------
#  Identifiers
#-------------------------------------------------------------------------
Identifier <- <Letter LetterOrDigit*> Spacing {p.Push(text)}

Letter <- [a-z] / [A-Z] / [_$]

LetterOrDigit <- [a-z] / [A-Z] / [0-9] / [_$]

#-------------------------------------------------------------------------
# Keyword
#-------------------------------------------------------------------------

EXIT 	<- "EXIT" 	Spacing	{p.PushInst(asm.OP_EXIT)}
RET 	<- "RET" 	Spacing {p.PushInst(asm.OP_RET)}
NOP 	<- "NOP" 	Spacing {p.PushInst(asm.OP_NOP)}

CALL 	<- "CALL" 	Space 	{p.PushInst(asm.OP_CALL)}
PUSH 	<- "PUSH" 	Space 	{p.PushInst(asm.OP_PUSH)}
POP 	<- "POP" 	Space 	{p.PushInst(asm.OP_POP)}
JMP 	<- "JMP" 	Space 	{p.PushInst(asm.OP_JMP)}

IN 		<- "IN" 	Space 	{p.PushInst(asm.OP_IN)}
OUT 	<- "OUT" 	Space 	{p.PushInst(asm.OP_OUT)}

CAL 	<- "CAL" 	Space 	{p.PushInst(asm.OP_CAL)}

LD 		<- "LD" 	Space 	{p.PushInst(asm.OP_LD)}
CMP 	<- "CMP" 	Space 	{p.PushInst(asm.OP_CMP)}

JPC 	<- "JPC" 	Space 	{p.PushInst(asm.OP_JPC)}

BLOCK 	<- ".BLOCK" Space	{p.Push(&asm.PseudoBlock{})}
DATA 	<- "DATA" 	Space	{p.Push(&asm.PseudoData{})}

CAL_OP <- ( "ADD" / "SUB" / "MUL" / "DIV" / "MOD" ) Space
CMP_OP <- ( "Z" / "BE" / "B" / "AE" / "A" / "NZ" ) Space

DATA_TYPE       <-  ( "DWORD" / "WORD" / "BYTE" / "FLOAT" / "INT" ) Space

#-------------------------------------------------------------------------
# Separators, Operators
#-------------------------------------------------------------------------
LBRK            <-  '['        	Spacing
#LPAR           <-  '('        	Spacing
RBRK            <-  ']'        	Spacing
#RPAR           <-  ')'        	Spacing
COMMA           <-  ','        	Spacing
SEMICOLON		<- 	";" 		Spacing
COLON			<- 	':'			Spacing
MINUS			<-	'-' 		Spacing

NL              <-  '\n'
EOT             <-  !.

#-------------------------------------------------------------------------
# Literals
#-------------------------------------------------------------------------

Literal
   <- ( FloatLiteral
      / IntegerLiteral          # May be a prefix of FloatLiteral
      / CharLiteral
      / StringLiteral
      ) Spacing

IntegerLiteral
   <- <MINUS?
	( HexNumeral
	/ BinaryNumeral
	/ OctalNumeral            # May be a prefix of HexNumeral or BinaryNumeral
	/ DecimalNumeral          # May be a prefix of OctalNumeral
	)> Spacing{p.Push(text);p.AddInteger()}

DecimalNumeral <- '0' / [1-9] ([_]* [0-9])*

HexNumeral     <- ('0x' / '0X') HexDigits

BinaryNumeral  <- ('0b' / '0B') [01] ([_]* [01])*

OctalNumeral   <- '0' ([_]* [0-7])+

FloatLiteral   <- HexFloat / DecimalFloat

DecimalFloat
   <- Digits '.' Digits?  Exponent? [fFdD]?
    / '.' Digits Exponent? [fFdD]?
    / Digits Exponent [fFdD]?
    / Digits Exponent? [fFdD]

Exponent <- [eE] [+\-]? Digits

HexFloat <- HexSignificand BinaryExponent [fFdD]?

HexSignificand
   <- ('0x' / '0X') HexDigits? '.' HexDigits
    / HexNumeral '.'?                           # May be a prefix of above

BinaryExponent <- [pP] [+\-]? Digits

Digits <- [0-9]([_]*[0-9])*

HexDigits <- HexDigit ([_]*HexDigit)*

HexDigit <- [a-f] / [A-F] / [0-9]

CharLiteral <- ['] (Escape / !['\\] .) [']

StringLiteral <- <'\"' (Escape / !["\\\n\r] .)* '\"'> {p.Push(text)}

Escape <- '\\' ([btnfr"'\\] / OctalEscape / UnicodeEscape)

OctalEscape
   <- [0-3][0-7][0-7]
    / [0-7][0-7]
    / [0-7]

UnicodeEscape
   <- 'u'+ HexDigit HexDigit HexDigit HexDigit

