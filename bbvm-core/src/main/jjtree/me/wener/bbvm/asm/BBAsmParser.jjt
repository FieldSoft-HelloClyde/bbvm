options{
//	DEBUG_PARSER=false;
//  DEBUG_LOOKAHEAD=false;
//  DEBUG_TOKEN_MANAGER=false;
//  FORCE_LA_CHECK=true;

    UNICODE_INPUT=true;
    IGNORE_CASE=true ;
//    MULTI=true;

    VISITOR=true;
    STATIC = false;
    NODE_DEFAULT_VOID=true;
    NODE_EXTENDS="BaseNode";
    NODE_PREFIX="AST";
    NODE_USES_PARSER=true;
    NODE_SCOPE_HOOK=true;
    VISITOR_DATA_TYPE="Object";
    VISITOR_RETURN_TYPE="Object";
    VISITOR_EXCEPTION="";
    TRACK_TOKENS=true;
}

PARSER_BEGIN(BBAsmParser)
package me.wener.bbvm.asm;
import me.wener.bbvm.vm.*;
import static me.wener.bbvm.vm.AddressingMode.*;
import java.util.*;
import java.math.*;
public class BBAsmParser extends BaseBBAsmParser {

}

PARSER_END(BBAsmParser)

SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\f"
}

TOKEN :{
    <NL: "\n">
    | <SPACE: " " | "\t" | "\f" | "\r" >
}

TOKEN :
{
	<I_CAL:	    "CAL">
	| <I_CALL:	"CALL">
	| <I_CMP:	"CMP">
	| <I_EXIT:	"EXIT">
	| <I_IN:	"IN">
	| <I_JMP:	"JMP">
	| <I_JPC:	"JPC">
	| <I_LD:	"LD">
	| <I_NOP:	"NOP">
	| <I_OUT:	"OUT">
	| <I_POP:	"POP">
	| <I_PUSH:	"PUSH">
	| <I_RET:	"RET">
	| <I_DATA:  "DATA">
}

// T prefix for Token
TOKEN :
{
    <T_REGISTER : "R0" | "R1" | "R2" | "R3" | "RP" | "RF" |"RS" | "RB">
    | <DATA_TYPE: "DWORD" | "WORD" | "BYTE" | "FLOAT" | "INT">
    | <PSEUDO_DATA_TYPE: <DATA_TYPE> | "CHAR" >
    | <CAL_OP: "ADD" | "SUB" | "MUL" | "DIV" | "MOD">
    | <CMP_OP: "Z" | "B" | "BE" | "A" | "AE" | "NZ">
    | <T_LABEL: <IDENTIFIER> ([" "])* <COLON>>
}

/* COMMENTS */

SPECIAL_TOKEN :
{
// Must not consume the \n
//  < SINGLE_LINE_COMMENT: "'"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
  < SINGLE_LINE_COMMENT: ("'"|";") (~["\n","\r"])* >
}

List<Assembly> Parse():{
    Instruction inst = null;
    Assembly asm = null;
    Token o = null;
    boolean empty = false;
}
{
     (
        (
            <NL>{empty=true;}
            |LOOKAHEAD(2) (
                o = <T_LABEL>{addLabel(o);}
                | inst = Instruction(){add(inst);}
                | asm = PseudoData(){add(asm);}
            ) (<NL>|<EOF>)
            // DATA ID [DT] _DATA,_DATA
        )
        {
           // Test current token
           if (token.specialToken != null) {
               addComment(token.specialToken, empty);
               log.debug("Deal here {}", token.specialToken);
           }
           empty = false;
        }
     )*
     <EOF>
     {
        return assemblies;
     }
}


PseudoData PseudoData():{
    PseudoData pseudo = new PseudoData();
    Value v;
    Token t,dt = null;
}{
    <I_DATA> t = <IDENTIFIER> (dt = <PSEUDO_DATA_TYPE>)? v = ValueLiteral() {pseudo.add(v);} (<COMMA> v = ValueLiteral(){pseudo.add(v);})*
    {
        pseudo.token = t;
        pseudo.name = t.image;
        pseudo.dataTypeToken = dt;
        return pseudo;
    }
}


Value ValueLiteral():{
    Value v;
    Token t;
}{
    // N based bytes ?
    LOOKAHEAD(2) v = IntegerValueLiteral(){return v;}
    |LOOKAHEAD(2) t = <STRING_LITERAL>{return Value.forString(t);}
    |LOOKAHEAD(2) <FLOATING_POINT_LITERAL>{return Value.forNumber(token);}
}
Value IntegerValueLiteral():{
    Token t = null;
}
{
    t = <INTEGER_LITERAL>{return Value.forNumber(t);}
}


Instruction Instruction():{
    Instruction inst = new Instruction();
    Token o = null,dataType = null,calType = null,cmpType = null;
    Operand a = null,b = null;
}
{
    (
        (o = <I_EXIT> | o = <I_RET> | o = <I_NOP>)
        | (o = <I_CALL> |o = <I_PUSH> |o = <I_POP> |o = <I_JMP>) a = Operand()
        | (o = <I_IN> | o = <I_OUT>) a = Operand() <COMMA> b = Operand()
        | o = <I_CAL> dataType = <DATA_TYPE> calType = <CAL_OP> a = Operand() <COMMA> b = Operand()
        | o = <I_LD> dataType = <DATA_TYPE> a = Operand() <COMMA> b = Operand()
        | o = <I_JPC> cmpType = <CMP_OP> a = Operand()
    )
    {
        inst.setOpcode(Opcode.valueOf(o.image.toUpperCase())).setA(a).setB(b);
        if(dataType != null) inst.setDataType(DataType.valueOf(dataType.image.toUpperCase()));
        if(cmpType != null) inst.setCompareType(CompareType.valueOf(cmpType.image.toUpperCase()));
        if(calType != null) inst.setCalculateType(CalculateType.valueOf(calType.image.toUpperCase()));

        return inst;
    }
}

Operand Operand():{
    Operand op = new Operand();
    Token token;
    Value v;
}
{

    (
        token = <T_REGISTER> {op.setValue(RegisterType.valueOf(token.image.toUpperCase())).setAddressingMode(REGISTER);}
        |LOOKAHEAD(2) token = <IDENTIFIER>{op.setAddressingMode(IMMEDIATE).setValue(-1);addLabelOperand(token,op);}
        |LOOKAHEAD(2) token = <INTEGER_LITERAL> {op.setAddressingMode(IMMEDIATE).setValue(Integer.parseInt(token.image));}
        |LOOKAHEAD(2) <LBRACKET> token = <INTEGER_LITERAL> <RBRACKET> {op.setAddressingMode(DIRECT).setValue(Integer.parseInt(token.image));}
        |LOOKAHEAD(2) <LBRACKET> token = <IDENTIFIER> <RBRACKET> {op.setAddressingMode(DIRECT).setValue(-1);addLabelOperand(token,op);}
        |LOOKAHEAD(2) <LBRACKET> token = <T_REGISTER> <RBRACKET> {op.setValue(RegisterType.valueOf(token.image.toUpperCase())).setAddressingMode(REGISTER_DEFERRED);}
    )
    {
        return op;
    }
}

// =========================================
// From java-1.7.jj
// =========================================
TOKEN :
{
  < #POSITIVE_INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <BINARY_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
| <INTEGER_LITERAL: (<MINUS> (<SPACE>)*)? <POSITIVE_INTEGER_LITERAL>>
| < #DECIMAL_LITERAL: ["1"-"9"] ((["_"])*["0"-"9"])* >      // Java 7 allows underscores
| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])((["_"])*["0"-"9","a"-"f","A"-"F"])* >      // Java 7 allows underscores
| < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])((["_"])*["0"-"1"])* >   // new for Java 7, also allows underscores
| < #OCTAL_LITERAL: "0" ((["_"])*(["0"-"7"]))* >      // Java 7 allows underscores
| < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["_"])*(["0"-"9"]))* "." ((["0"-"9"])((["_"])*(["0"-"9"]))*)* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? ["f","F","d","D"]
  >

| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
//| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}


/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < POINTER: "->" >
| < DIAMOND: "<>" >

}
